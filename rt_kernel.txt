
https://towardsdatascience.com/faster-video-processing-in-python-using-parallel-computing-25da1ad4a01

sudo apt-get install kernel-package libncurses5-dev fakeroot wget xz-utils libncurses-dev libssl-dev flex bison
sudo apt-get install libncurses-dev libssl-dev flex bison
sudo apt-get install build-essential libnuma-dev

linux-headers-5.4.52superrealtime-rt31_5.4.52superrealtime-rt31-10.00.Custom_amd64.deb
linux-image-5.4.52superrealtime-rt31_5.4.52superrealtime-rt31-10.00.Custom_amd64.deb

wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.52.tar.xz

wget https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/5.4/patch-5.4.52-rt31.patch.xz

tar xJf linux-5.4.52.tar.xz

cd linux-5.4.52

xzcat ../patch-5.4.52-rt31.patch.xz | patch -p1 --dry-run

xzcat ../patch-5.4.52-rt31.patch.xz | patch -p1

make menuconfig

fakeroot make-kpkg -j 8 --initrd --append-to-version=superrealtime kernel-image kernel-headers

cd ..

sudo dpkg -i linux-image-4.4.231superrealtime-rt202_4.4.231superrealtime-rt202-10.00.Custom_amd64.deb linux-headers-4.4.231superrealtime-rt202_4.4.231superrealtime-rt202-10.00.Custom_amd64.deb

reboot

uname -a 

getconf CLK_TCK
git clone git://git.kernel.org/pub/scm/linux/kernel/git/clrkwllms/rt-tests.git
cp ./cyclictest /usr/bin/
./cyclictest -t1 -p 80 -n -i 10000 -l 10000
curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh

chmod +x wireguard-install.sh

./wireguard-install.sh

Job for wg-quick@wg0.service failed because the control process exited with error code.
See "systemctl status wg-quick@wg0.service" and "journalctl -xe" for details.
Created symlink /etc/systemd/system/multi-user.target.wants/wg-quick@wg0.service â†’ /lib/systemd/system/wg-quick@.service


./wireguard-install.sh add-client


nano /etc/sysctl.conf

net.core.netdev_max_backlog=300000
net.ipv4.tcp_rmem= 10240 87380 10485760
net.ipv4.tcp_wmem= 10240 87380 10485760
net.core.rmem_max=10485760
net.core.wmem_max=10485760
net.core.somaxconn= 300000
net.ipv4.udp_rmem_min = 10240
net.ipv4.udp_wmem_min = 10240
net.ipv4.udp_mem= 10240 87380 10485760
fs.file-max = 2097152
net.ipv4.tcp_rfc1337 = 1
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr

sysctl -p



net.core.default_qdisc = cake
### IMPROVE SYSTEM MEMORY MANAGEMENT ###
# Increase size of file handles and inode cache
fs.file-max = 2097152
# Do less swapping
vm.swappiness = 10
vm.dirty_ratio = 60
vm.dirty_background_ratio = 2
### TUNING NETWORK PERFORMANCE ###
# Default Socket Receive Buffer
net.core.rmem_default = 31457280
# Maximum Socket Receive Buffer
net.core.rmem_max = 12582912
# Default Socket Send Buffer
net.core.wmem_default = 31457280
# Maximum Socket Send Buffer
net.core.wmem_max = 12582912
# Increase number of incoming connections
net.core.somaxconn = 4096
# Increase number of incoming connections backlog
net.core.netdev_max_backlog = 65536
# Increase the maximum amount of option memory buffers
net.core.optmem_max = 25165824
# Increase the maximum total buffer-space allocatable
# This is measured in units of pages (4096 bytes)
net.ipv4.tcp_mem = 65536 131072 262144
net.ipv4.udp_mem = 65536 131072 262144
# Increase the read-buffer space allocatable
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.udp_rmem_min = 16384
# Increase the write-buffer-space allocatable
net.ipv4.tcp_wmem = 8192 65536 16777216
net.ipv4.udp_wmem_min = 16384
# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
